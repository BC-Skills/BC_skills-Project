{/* <div className="h-[100px] flex justify-between  items-center">
    <div className="mt-5 mb-2 border-2 py-1 px-3 flex justify-between  rounded-md hover:border-blue-500">
        <input
            ref={searchInputRef}
            id="searchInput"
            className="flex-grow outline-none text-gray-600 focus:text-blue-600"
            type="text"
            placeholder="Search Employee..."
        />
        <span>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 text-gray-400 focus:text-blue-400 transition duration-100 cursor-pointer"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
            >
                {" "}
                <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        </span>
    </div>
    <div className="">
        <button
            type="button"
            onClick={console.log("hye")}
            className="inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white rounded-lg bg-blue-600 to-voilet-500 sm:ml-auto shadow-md shadow-gray-300 hover:scale-[1.02] transition-transform"
        >
            <svg
                className="mr-2 -ml-1 w-6 h-6"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"></path>
            </svg>
            Add Project
        </button>
    </div>
    <div className="flex flex-row gap-6 justify-center items-center">
        <div className="flex-1">
            <h1 className="text-[20px] font-bold">
                {currentUser.name}
            </h1>
            <h1 className="text-[15px] font-bold text-blue-400">
                {profile.name}
            </h1>
        </div>

        <div className="user">
            <img
                className="flex-1"
                src={currentUser.profile_picture}
                alt="Profile Picture"
            />
        </div>
    </div>
</div> */}
















<div className="flex-1 flex flex-col gap-4">
    <div className="flex-1 flex flex-row-reverse gap-2 items-center">
        <div className="flex-1">
            <h1 className="text-[20px] font-bold">
                {
                    project
                        .client
                        ?.name
                }
            </h1>
            <h1 className="text-[15px] font-bold">
                Email:{" "}
                {
                    project
                        .client
                        ?.email
                }
            </h1>
            <h1 className="text-[15px] font-bold">
                tele :{" "}
                {
                    project
                        .client
                        ?.tel
                }
            </h1>
        </div>
        <div className="relative w-16 h-16">
            <img
                src={
                    project
                        .client
                        ?.profile_picture
                }
                alt="Image"
                className="absolute top-0 left-0 w-full h-full rounded-full object-cover"
            />
        </div>
        <div className="w-20 text-black font-bold">
            Client:
        </div>
    </div>
    <div className="flex-1 flex flex-row-reverse gap-2 items-center">
        <div className="flex-1">
            <h1 className="text-[20px] font-bold">
                {
                    project
                        .projectManager
                        ?.name
                }
            </h1>
            <h1 className="text-[15px] font-bold">
                Email:{" "}
                {
                    project
                        .projectManager
                        ?.email
                }
            </h1>
            <h1 className="text-[15px] font-bold">
                tele :{" "}
                {
                    project
                        .projectManager
                        ?.tel
                }
            </h1>
        </div>
        <div className="relative w-16 h-16">
            <img
                src={
                    project
                        .projectManager
                        ?.profile_picture
                }
                alt="Image"
                className="absolute top-0 left-0 w-full h-full rounded-full object-cover"
            />
        </div>
        <div className="w-20 text-black font-bold">
            Manager:
        </div>
    </div>
</div>





































































/* eslint-disable no-unused-vars */
import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useStateContext } from "../../../contexts/contextProvider";
import axiosClient from "../../../axios";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import AddProject from "../../model/AddProject";

export default function Projects() {
    const storedLinks = localStorage.getItem("links");
    const { currentUser } = useStateContext(); // Assuming that "profile" is not being used
    const [projects, setProjects] = useState([]);
    const navigate = useNavigate();
    const [showModal, setShowModal] = useState(false);
    const searchInputRef = useRef(null);
  
    const handleShowModal = () => {
        setShowModal(true);
    };
    const handleCloseModal = () => {
        setShowModal(false);
    };
    useEffect(() => {
        const parsedLinkss = JSON.parse(storedLinks) || [];
        const hasProjectsLink = parsedLinkss.some(
            (link) => link.name === "projets"
        );
        if (!hasProjectsLink) {
            navigate("/users");
        }
    }, [storedLinks]);

    const handleSearchChange = (searchText, tableRows) => {
        searchText = searchText.toLowerCase();
        for (let i = 1; i < tableRows.length; i++) {
            const rowData = tableRows[i].textContent.toLowerCase();
            if (rowData.includes(searchText)) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }
    };
    const handleSearch = () => {
        const searchText = searchInputRef.current.value;
        const employeeTable = document.getElementById("employeeTable");
        const tableRows = employeeTable.getElementsByTagName("tr");
        handleSearchChange(searchText, tableRows);
    };
    useEffect(() => {
        const searchInput = searchInputRef.current;
        if (searchInput) {
            searchInput.addEventListener("input", handleSearch);
        }

        // Remove the event listener when the component unmounts
        return () => {
            if (searchInput) {
                searchInput.removeEventListener("input", handleSearch);
            }
        };
    }, []);
    const [completedProjects, setCompletedProjects] = useState([]);
    const [pendingProjects, setPendingProjects] = useState([]);
    const [startProjects, setStartProjects] = useState([]);
    const fetchProjects = async () => {
        try {
          const response = await axiosClient.get("projects");
          const projectsData = response.data;
      
          const updatedProjects = await Promise.all(
            projectsData.map(async (project) => {
              const clientResponse = await axiosClient.get(`users/${project.client_id}`);
              const projectManagerResponse = await axiosClient.get(`users/${project.project_manager_id}`);
              const client = clientResponse.data;
              const projectManager = projectManagerResponse.data;
              return { ...project, client, projectManager };
            })
          );
      
          // Categorize projects based on their status
          const completedProjects = updatedProjects.filter((project) => project.status === "Completed");
          const pendingProjects = updatedProjects.filter((project) => project.status === "Pending");
          const startProjects = updatedProjects.filter((project) => project.status === "Start");
      
          setCompletedProjects(completedProjects);
          setPendingProjects(pendingProjects);
          setStartProjects(startProjects);
        } catch (error) {
          console.error("Error fetching projects:", error);
        }
      };
      
      useEffect(() => {
        fetchProjects();
      }, []);
    //   -------------------------------------------------------------------------------

    const handleDragEnd = async (result) => {
        const { destination, source } = result;
        // Check if the project was dropped outside of any Droppable (e.g., into the void)
        if (!destination) {
            return;
        }

        // Check if the project was dropped in a different list than the source list
        if (
            destination.droppableId !== source.droppableId ||
            destination.index !== source.index
        ) {
            const draggableProject = startProjects[source.index];
            let updatedStartProjects = [...startProjects];
            let updatedPendingProjects = [...pendingProjects];
            let updatedCompletedProjects = [...completedProjects];

            // Remove the project from the source list using the draggableProject's index
            switch (source.droppableId) {
                case "startProjects":
                    updatedStartProjects.splice(source.index, 1);
                    break;
                case "pendingProjects":
                    updatedPendingProjects.splice(source.index, 1);
                    break;
                case "completedProjects":
                    updatedCompletedProjects.splice(source.index, 1);
                    break;
                default:
                    break;
            }

            // Add the project to the destination list
            switch (destination.droppableId) {
                case "startProjects":
                    updatedStartProjects.splice(
                        destination.index,
                        0,
                        draggableProject
                    );
                    break;
                case "pendingProjects":
                    updatedPendingProjects.splice(
                        destination.index,
                        0,
                        draggableProject
                    );
                    break;
                case "completedProjects":
                    updatedCompletedProjects.splice(
                        destination.index,
                        0,
                        draggableProject
                    );
                    break;
                default:
                    break;
            }

            setStartProjects(updatedStartProjects);
            setPendingProjects(updatedPendingProjects);
            setCompletedProjects(updatedCompletedProjects);

            // Send API call to update project status
            try {
                const projectId = draggableProject.id;
                const newStatus = destination.droppableId;
                await axiosClient.patch(`projects/${projectId}`, {
                    status: newStatus,
                });
                console.log("Project status updated successfully!");
            } catch (error) {
                console.error("Error updating project status:", error);
                // If the API call fails, you might want to revert the state to its previous state.
            }
        }
    };

    return (
        <div className="flex-1 flex flex-col p-4">
            <DragDropContext onDragEnd={handleDragEnd}>
                <div className="flex-1 flex flex-row justify-around gap-6">
                    <div className="flex-1 bg-white gap-10 flex flex-col">
                        <div className="h-[50px] gap-3 flex relative rounded-xl overflow-hidden bg-violet-300 shadow-md shadow-gray-400">
                            <div
                                className={` h-full flex justify-center items-center bg-violet-600 w-[50%]`}
                            ></div>

                            <div className="absolute text-white inset-0 flex items-center justify-center text-sm font-medium ">
                                <ion-icon
                                    size="large"
                                    name="checkmark-circle-outline"
                                ></ion-icon>
                                <h1 className="text-[25px] font-bold">Start</h1>
                                <h1 className="font-bold ml-11  text-lg text-red">
                                    13/17
                                </h1>
                            </div>
                        </div>
                        <Droppable droppableId="startProjects">
                            {(provided) => (
                                <div
                                    className="flex-1 p-2 flex flex-col gap-6 rounded-3xl shadow-2xl bg-gray-300"
                                    ref={provided.innerRef}
                                    {...provided.droppableProps}
                                >
                                    {startProjects.map((project, index) => (
                                        <Draggable
                                            key={project.id}
                                            draggableId={project.id.toString()}
                                            index={index}
                                        >
                                            {(provided) => (
                                                <div
                                                    className="bg-white flex flex-col p-4 rounded-2xl shadow-2xl"
                                                    ref={provided.innerRef}
                                                    {...provided.draggableProps}
                                                    {...provided.dragHandleProps}
                                                >
                                                    <div className="flex flex-row justify-between items-center">
                                                        <h1 className="text-[30px] font-bold font-serif">
                                                            {project.nom}
                                                        </h1>
                                                        <h1 className="text-[20px] font-bold font-serif">
                                                            Durre :{" "}
                                                            {project.duree}
                                                            /Months
                                                        </h1>
                                                    </div>
                                                    <div className="flex-1 flex flex-col gap-4">
                                                        <div className=" flex-1 flex flex-row-reverse gap-2 items-center">
                                                            <div className="flex-1">
                                                                <h1 className="text-[20px] font-bold">
                                                                    {
                                                                        project
                                                                            .client
                                                                            ?.name
                                                                    }
                                                                </h1>
                                                                <h1 className="text-[15px] font-bold">
                                                                    Email:{" "}
                                                                    {
                                                                        project
                                                                            .client
                                                                            ?.email
                                                                    }
                                                                </h1>
                                                                <h1 className="text-[15px] font-bold">
                                                                    tele :{" "}
                                                                    {
                                                                        project
                                                                            .client
                                                                            ?.tel
                                                                    }
                                                                </h1>
                                                            </div>
                                                            <div className="relative w-16 h-16">
                                                                <img
                                                                    src={
                                                                        project
                                                                            .client
                                                                            ?.profile_picture
                                                                    }
                                                                    alt="Image"
                                                                    className="absolute top-0 left-0 w-full h-full rounded-full object-cover"
                                                                />
                                                            </div>
                                                            <div className="w-20 text-black font-bold">
                                                                Client:
                                                            </div>
                                                        </div>
                                                        <div className=" flex-1 flex flex-row-reverse gap-2 items-center">
                                                            <div className="flex-1">
                                                                <h1 className="text-[20px] font-bold">
                                                                    {
                                                                        project
                                                                            .projectManager
                                                                            ?.name
                                                                    }
                                                                </h1>
                                                                <h1 className="text-[15px] font-bold">
                                                                    Email:{" "}
                                                                    {
                                                                        project
                                                                            .projectManager
                                                                            ?.email
                                                                    }
                                                                </h1>
                                                                <h1 className="text-[15px] font-bold">
                                                                    tele :{" "}
                                                                    {
                                                                        project
                                                                            .projectManager
                                                                            ?.tel
                                                                    }
                                                                </h1>
                                                            </div>
                                                            <div className="relative w-16 h-16">
                                                                <img
                                                                    src={
                                                                        project
                                                                            .projectManager
                                                                            ?.profile_picture
                                                                    }
                                                                    alt="Image"
                                                                    className="absolute top-0 left-0 w-full h-full rounded-full object-cover"
                                                                />
                                                            </div>
                                                            <div className="w-20 text-black font-bold">
                                                                Manager:
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            )}
                                        </Draggable>
                                    ))}
                                    {provided.placeholder}
                                </div>
                            )}
                        </Droppable>
                    </div>
                    <div className="flex-1 bg-white gap-10 flex flex-col">
                        <div className="h-[50px] gap-3 flex relative rounded-xl overflow-hidden bg-orange-300 shadow-md shadow-gray-400">
                            <div
                                className={` h-full flex justify-center items-center bg-orange-500 w-[50%]`}
                            ></div>

                            <div className="absolute text-white inset-0 flex items-center justify-center text-sm font-medium ">
                                <ion-icon
                                    size="large"
                                    name="checkmark-circle-outline"
                                ></ion-icon>
                                <h1 className="text-[25px] font-bold">
                                    Panding
                                </h1>
                                <h1 className="font-bold ml-11  text-lg text-red">
                                    13/17
                                </h1>
                            </div>
                        </div>
                        <Droppable droppableId="pendingProjects">
                            {(provided) => (
                                <div
                                    className="flex-1 p-2 gap-6 scroll-auto flex flex-col rounded-3xl shadow-2xl bg-gray-300"
                                    ref={provided.innerRef}
                                    {...provided.droppableProps}
                                >
                                    {pendingProjects.map((project, index) => (
                                        <Draggable
                                            key={project.id}
                                            draggableId={project.id.toString()}
                                            index={index}
                                        >
                                            {(provided) => (
                                                <div
                                                    className="bg-white flex flex-col p-4 rounded-2xl shadow-2xl"
                                                    ref={provided.innerRef}
                                                    {...provided.draggableProps}
                                                    {...provided.dragHandleProps}
                                                >
                                                    <div className="flex flex-row justify-between items-center">
                                                        <h1 className="text-[30px] font-bold font-serif">
                                                            {project.nom}
                                                        </h1>
                                                        <h1 className="text-[20px] font-bold font-serif">
                                                            Durre :{" "}
                                                            {project.duree}
                                                            /Months
                                                        </h1>
                                                    </div>
                                                  
                                                </div>
                                            )}
                                        </Draggable>
                                    ))}
                                    {provided.placeholder}
                                </div>
                            )}
                        </Droppable>
                    </div>
                    <div className="flex-1 bg-white gap-10 flex flex-col">
                        <div className="h-[50px] gap-3 flex relative rounded-xl overflow-hidden shadow-md bg-green-400 shadow-gray-400">
                            <div
                                className={` h-full flex justify-center items-center  bg-green-800 w-[50%]`}
                            ></div>
                            <div className="absolute text-white inset-0 flex items-center justify-center text-sm font-medium ">
                                <ion-icon
                                    size="large"
                                    name="checkmark-circle-outline"
                                ></ion-icon>
                                <h1 className="text-[25px] font-bold">
                                    Completed
                                </h1>
                                <h1 className="font-bold ml-11  text-lg text-red">
                                    13/17
                                </h1>
                            </div>
                        </div>
                        <Droppable droppableId="completedProjects">
              {(provided) => (
                <div
                  className="flex-1 p-2 gap-6 scroll-auto flex flex-col rounded-3xl shadow-2xl bg-gray-300"
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                >
                  {completedProjects.map((project, index) => (
                    <Draggable
                      key={project.id}
                      draggableId={project.id.toString()}
                      index={index}
                    >
                      {(provided) => (
                        <div
                          className="bg-white flex flex-col p-4 rounded-2xl shadow-2xl"
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                        >
                          <div className="flex flex-row justify-between items-center">
                            <h1 className="text-[30px] font-bold font-serif">
                              {project.nom}
                            </h1>
                            <h1 className="text-[20px] font-bold font-serif">
                              Durre : {project.duree}/Months
                            </h1>
                          </div>
                          <div className="flex-1 flex flex-col gap-4">
                            <div className=" flex-1 flex flex-row-reverse gap-2 items-center">
                              {/* ... */}
                            </div>
                            <div className=" flex-1 flex flex-row-reverse gap-2 items-center">
                              {/* ... */}
                            </div>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
                    </div>
                </div>
            </DragDropContext>
        </div>
    );
}
