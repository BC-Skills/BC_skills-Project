import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Header from "./tickets/header";
import Cardtickes from "./tickets/Cardtickes";
import axiosClient from "../../../axios";
import { useStateContext } from "../../../contexts/contextProvider";
import { DragDropContext, Draggable, Droppable } from "react-beautiful-dnd";

const Tickets = () => {
    const storedLinks = localStorage.getItem("links");
    const navigate = useNavigate();
    const [tickets, setTickets] = useState({
        todo: [],
        inProgress: [],
        done: [],
    });
    const [selectedProject, setSelectedProject] = useState(null);
    const [showForm, setShowForm] = useState(false);
    const [ticketName, setTicketName] = useState("");
    const { currentUser } = useStateContext();
    const [loading, setLoading] = useState(false);

    const [todoForm, setTodoForm] = useState(false);
    const [inProgressForm, setInProgressForm] = useState(false);
    const [doneForm, setDoneForm] = useState(false);
    const [ticketNameTodo, setTicketNameTodo] = useState("");
    const [ticketNameInProgress, setTicketNameInProgress] = useState("");
    const [ticketNameDone, setTicketNameDone] = useState("");

    useEffect(() => {
        const parsedLinks = JSON.parse(storedLinks) || [];
        const hasProjectsLink = parsedLinks.some(
            (link) => link.name === "tickets"
        );
        if (!hasProjectsLink) {
            navigate("/users");
        }
    }, [storedLinks, navigate]);

    useEffect(() => {
        if (selectedProject !== null) {
            fetchUsersData();
        }
    }, [selectedProject]);

    const fetchUsersData = async () => {
        try {
            const response = await axiosClient.get(
                `ticketss/${selectedProject}`
            );
            const allTicketsData = response.data;

            // Filter the tickets based on their status
            const ticketsTodo = allTicketsData.filter(
                (ticket) => ticket.status === "A faire"
            );
            const ticketsInProgress = allTicketsData.filter(
                (ticket) => ticket.status === "En Cours"
            );
            const ticketsDone = allTicketsData.filter(
                (ticket) => ticket.status === "Fini"
            );

            // Set the filtered tickets in the state
            setTickets({
                todo: ticketsTodo,
                inProgress: ticketsInProgress,
                done: ticketsDone,
            });
            setLoading(false);
        } catch (error) {
            alert("Error fetching tickets:", error);
            setLoading(false);
        }
    };

    const handleProjectSelect = (selectedProject) => {
        setSelectedProject(selectedProject);
    };

    const handleCreateTicketTodo = () => {
        setTodoForm(true);
    };

    const handleCreateTicketInProgress = () => {
        setInProgressForm(true);
    };

    const handleCreateTicketDone = () => {
        setDoneForm(true);
    };

    const handleSubmitTicketTodo = async (event) => {
        event.preventDefault();
        setLoading(true);

        try {
            const response = await axiosClient.post("ticketss", {
                nom: ticketNameTodo,
                status: "A faire",
                project_id: selectedProject,
                user_id: currentUser.id,
            });
            fetchUsersData();
            console.log("Ticket created successfully:", response.data);
            setTicketNameTodo("");
            setTodoForm(false);
        } catch (error) {
            console.log("Error creating ticket:", error);
            setLoading(false);
        }
    };

    const handleSubmitTicketInProgress = async (event) => {
        event.preventDefault();
        setLoading(true);

        try {
            const response = await axiosClient.post("ticketss", {
                nom: ticketNameInProgress,
                status: "En Cours",
                project_id: selectedProject,
                user_id: currentUser.id,
            });
            fetchUsersData();
            console.log("Ticket created successfully:", response.data);
            setTicketNameInProgress("");
            setInProgressForm(false);
        } catch (error) {
            console.log("Error creating ticket:", error);
            setLoading(false);
        }
    };

    const handleSubmitTicketDone = async (event) => {
        event.preventDefault();
        setLoading(true);

        try {
            const response = await axiosClient.post("ticketss", {
                nom: ticketNameDone,
                status: "Fini",
                project_id: selectedProject,
                user_id: currentUser.id,
            });
            fetchUsersData();
            console.log("Ticket created successfully:", response.data);
            setTicketNameDone("");
            setDoneForm(false);
        } catch (error) {
            console.log("Error creating ticket:", error);
            setLoading(false);
        }
    };

    const handleDragEnd = async (result) => {
        if (!result.destination) {
            return;
        }

        const { source, destination, draggableId } = result;

        if (source.droppableId !== destination.droppableId) {
            const ticketId = draggableId;
            const newStatus =
                destination.droppableId === "inProgress"
                    ? "En Cours"
                    : destination.droppableId === "done"
                    ? "Fini"
                    : "A faire";
            try {
                // Update ticket status in the API
                await axiosClient.put(`ticketss/${ticketId}`, {
                    status: newStatus,
                });
                fetchUsersData(); // Refresh ticket data after the update
            } catch (error) {
                console.log("Error updating ticket status:", error);
            }
        }
    };

    return (
        <DragDropContext onDragEnd={handleDragEnd}>
            <div className="flex-1 flex flex-col">
                <Header onSelectProject={handleProjectSelect} />
                <div className="flex-1 flex gap-10 flex-wrap flex-row mt-12">
                    <div className="flex-[1.5]  flex gap-10 ju flex-wrap flex-rox">
                        <div className="flex-1 min-w-[400px] flex flex-col justify-between bg-gray-100 rounded-xl shadow-2xl">
                            <div className="h-[50px] flex first-letter text-white bg-violet-900 pl-10 pr-10 p-10 justify-between items-center">
                                <h1 className="text-2xl">A faire</h1>
                            </div>
                            {loading ? ( // Show loading indicator if loading is true
                                <p>Loading...</p>
                            ) : (
                                <Droppable droppableId="En Cours">
                                    {(provided) => (
                                        <div
                                            {...provided.droppableProps}
                                            ref={provided.innerRef}
                                            className="flex-1 max-h-[800px] flex flex-col gap-5 p-8 overflow-auto"
                                        >
                                            {tickets.todo.length > 0 ? (
                                                tickets.todo.map(
                                                    (ticket, index) => (
                                                        <Draggable
                                                            key={ticket.id}
                                                            draggableId={ticket.id.toString()}
                                                            index={index}
                                                        >
                                                            {(provided) => (
                                                                <div
                                                                    ref={
                                                                        provided.innerRef
                                                                    }
                                                                    {...provided.draggableProps}
                                                                    {...provided.dragHandleProps}
                                                                >
                                                                    <Cardtickes
                                                                        key={
                                                                            ticket.id
                                                                        }
                                                                        tickets={
                                                                            ticket
                                                                        }
                                                                        fetchticketsData={
                                                                            fetchUsersData
                                                                        }
                                                                    />
                                                                </div>
                                                            )}
                                                        </Draggable>
                                                    )
                                                )
                                            ) : (
                                                <p>No tickets found.</p>
                                            )}
                                            {provided.placeholder}
                                        </div>
                                    )}
                                </Droppable>
                            )}
                            <div className="h-[50px] flex mt-8 first-letter pb-10 justify-between items-center">
                                {!todoForm && (
                                    <button
                                        className="h-[50px] flex-1 flex first-letter text-2xl pl-10 pr-10 p-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        onClick={handleCreateTicketTodo}
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            width="30"
                                            height="30"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                            className="mr-2"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth="2"
                                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                                            />
                                        </svg>
                                        Crée tickets
                                    </button>
                                )}
                                {todoForm && (
                                    <form
                                        onSubmit={handleSubmitTicketTodo}
                                        className="flex items-start justify-center "
                                    >
                                        <input
                                            type="text"
                                            value={ticketNameTodo}
                                            onChange={(e) =>
                                                setTicketNameTodo(
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Enter ticket name"
                                            className="p-2 m-2 border  border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-400"
                                        />
                                        <button
                                            type="submit"
                                            className=" flex first-letter text-2xl h-[40px] mt-2 pl-10  pr-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        >
                                            Create Ticket
                                        </button>
                                    </form>
                                )}
                            </div>
                        </div>
                        <div className="flex-1 min-w-[400px] flex flex-col justify-between bg-gray-100 rounded-xl shadow-2xl">
                            <div className="h-[50px] flex first-letter pl-10 pr-10 p-10 justify-between bg-orange-300 items-center">
                                <h1 className="text-2xl">En Cours</h1>
                            </div>
                            {loading ? ( // Show loading indicator if loading is true
                                <p>Loading..</p>
                            ) : (
                                <Droppable droppableId="A faire">
                                    {(provided) => (
                                        <div
                                            {...provided.droppableProps}
                                            ref={provided.innerRef}
                                            className="flex-1 max-h-[800px] flex flex-col gap-5 p-8 overflow-auto"
                                        >
                                            {/* Check loading state and render accordingly */}
                                            {loading ? (
                                                <p>Loading...</p>
                                            ) : tickets.inProgress.length ? (
                                                tickets.inProgress.map(
                                                    (ticket, index) => (
                                                        <Draggable
                                                            key={ticket.id}
                                                            draggableId={ticket.id.toString()}
                                                            index={index}
                                                        >
                                                            {(provided) => (
                                                                <div
                                                                    ref={
                                                                        provided.innerRef
                                                                    }
                                                                    {...provided.draggableProps}
                                                                    {...provided.dragHandleProps}
                                                                >
                                                                    <Cardtickes
                                                                        key={
                                                                            ticket.id
                                                                        }
                                                                        tickets={
                                                                            ticket
                                                                        }
                                                                        fetchticketsData={
                                                                            fetchUsersData
                                                                        }
                                                                    />
                                                                </div>
                                                            )}
                                                        </Draggable>
                                                    )
                                                )
                                            ) : (
                                                <p>No tickets found.</p>
                                            )}
                                        </div>
                                    )}
                                </Droppable>
                            )}
                            <div className="h-[50px] flex mt-8 first-letter pb-10 justify-between items-center">
                                {!inProgressForm && (
                                    <button
                                        className="h-[50px] flex-1 flex first-letter text-2xl pl-10 pr-10 p-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        onClick={handleCreateTicketInProgress}
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            width="30"
                                            height="30"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                            className="mr-2"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth="2"
                                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                                            />
                                        </svg>
                                        Crée tickets
                                    </button>
                                )}
                                {inProgressForm && (
                                    <form
                                        onSubmit={handleSubmitTicketInProgress}
                                        className="flex items-start justify-center "
                                    >
                                        <input
                                            type="text"
                                            value={ticketNameInProgress}
                                            onChange={(e) =>
                                                setTicketNameInProgress(
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Enter ticket name"
                                            className="p-2 m-2 border  border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-400"
                                        />
                                        <button
                                            type="submit"
                                            className=" flex first-letter text-2xl h-[40px] mt-2 pl-10  pr-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        >
                                            Create Ticket
                                        </button>
                                    </form>
                                )}
                            </div>
                        </div>
                        <div className="flex-1 min-w-[400px] flex flex-col justify-between bg-gray-100 rounded-xl shadow-2xl">
                            <div className="h-[50px] flex first-letter pl-10 pr-10 p-10 justify-between bg-green-400 items-center">
                                <h1 className="text-2xl">Fini</h1>
                            </div>
                            <Droppable droppableId="Fini">
                                {(provided) => (
                                    <div
                                        {...provided.droppableProps}
                                        ref={provided.innerRef}
                                        className="flex-1 max-h-[800px] flex flex-col gap-5 p-8 overflow-auto"
                                    >
                                        {/* Check loading state and render accordingly */}
                                        {loading ? (
                                            <p>Loading...</p>
                                        ) : tickets.done.length ? (
                                            tickets.done.map(
                                                (ticket, index) => (
                                                    <Draggable
                                                        key={ticket.id}
                                                        draggableId={ticket.id.toString()}
                                                        index={index}
                                                    >
                                                        {(provided) => (
                                                            <div
                                                                ref={
                                                                    provided.innerRef
                                                                }
                                                                {...provided.draggableProps}
                                                                {...provided.dragHandleProps}
                                                            >
                                                                <Cardtickes
                                                                    key={
                                                                        ticket.id
                                                                    }
                                                                    tickets={
                                                                        ticket
                                                                    }
                                                                    fetchticketsData={
                                                                        fetchUsersData
                                                                    }
                                                                />
                                                            </div>
                                                        )}
                                                    </Draggable>
                                                )
                                            )
                                        ) : (
                                            <p>No tickets found.</p>
                                        )}
                                    </div>
                                )}
                            </Droppable>
                            <div className="h-[50px] flex mt-8  first-letter pb-10 justify-between items-center">
                                {!doneForm && (
                                    <button
                                        className="h-[50px] flex-1 flex first-letter text-2xl pl-10 pr-10 p-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        onClick={handleCreateTicketDone}
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            width="30"
                                            height="30"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                            className="mr-2"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth="2"
                                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                                            />
                                        </svg>
                                        Crée tickets
                                    </button>
                                )}
                                {doneForm && (
                                    <form
                                        onSubmit={handleSubmitTicketDone}
                                        className="flex items-start justify-center "
                                    >
                                        <input
                                            type="text"
                                            value={ticketNameDone}
                                            onChange={(e) =>
                                                setTicketNameDone(
                                                    e.target.value
                                                )
                                            }
                                            placeholder="Enter ticket name"
                                            className="p-2 m-2 border  border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-400"
                                        />
                                        <button
                                            type="submit"
                                            className=" flex first-letter text-2xl h-[40px] mt-2 pl-10  pr-10 justify-start items-center border border-gray-300 rounded-md hover:border-blue-500"
                                        >
                                            Create Ticket
                                        </button>
                                    </form>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DragDropContext>
    );
};

export default Tickets;
