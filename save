/* eslint-disable no-unused-vars */
import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useStateContext } from "../../../contexts/contextProvider";
import axiosClient from "../../../axios";
import Cards, { Header } from "./Componets/cards";

export default function Projects() {
    const storedLinks = localStorage.getItem("links");
    const { currentUser, profile } = useStateContext();
    const [projects, setProjects] = useState([]);

    const navigate = useNavigate();
    useEffect(() => {
        const parsedLinkss = JSON.parse(storedLinks) || [];
        const hasProjectsLink = parsedLinkss.some(
            (link) => link.name === "projets"
        );
        console.log(parsedLinkss);
        if (!hasProjectsLink) {
            navigate("/users");
        }
    }, [storedLinks]);

    const handleSearchChange = (searchText, tableRows) => {
        searchText = searchText.toLowerCase();
        for (let i = 1; i < tableRows.length; i++) {
            const rowData = tableRows[i].textContent.toLowerCase();
            if (rowData.includes(searchText)) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }
    };
    const handleSearch = () => {
        const searchText = searchInputRef.current.value;
        const employeeTable = document.getElementById("employeeTable");
        const tableRows = employeeTable.getElementsByTagName("tr");
        handleSearchChange(searchText, tableRows);
    };
    const searchInputRef = useRef(null);
    useEffect(() => {
        const searchInput = searchInputRef.current;
        if (searchInput) {
            searchInput.addEventListener("input", handleSearch);
        }

        // Remove the event listener when the component unmounts
        return () => {
            if (searchInput) {
                searchInput.removeEventListener("input", handleSearch);
            }
        };
    }, []);

    const [completedProjects, setCompletedProjects] = useState([]);
    const [pendingProjects, setPendingProjects] = useState([]);
    const [startProjects, setStartProjects] = useState([]);

    const fetchProjects = async () => {
        try {
            const response = await axiosClient.get("projects");
            const projectsData = response.data;

            const updatedProjects = await Promise.all(
                projectsData.map(async (project) => {
                    const clientResponse = await axiosClient.get(
                        `users/${project.client_id}`
                    );
                    const projectManagerResponse = await axiosClient.get(
                        `users/${project.project_manager_id}`
                    );

                    const client = clientResponse.data;
                    const projectManager = projectManagerResponse.data;

                    return { ...project, client, projectManager };
                })
            );

            // Categorize projects based on their status
            const completedProjects = updatedProjects.filter(
                (project) => project.status === "Completed"
            );
            const pendingProjects = updatedProjects.filter(
                (project) => project.status === "Pending"
            );
            const startProjects = updatedProjects.filter(
                (project) => project.status === "Start"
            );

            setCompletedProjects(completedProjects);
            setPendingProjects(pendingProjects);
            setStartProjects(startProjects);
        } catch (error) {
            console.error("Error fetching projects:", error);
        }
    };

    useEffect(() => {
        fetchProjects();
    }, []);

    const [withValue, setWithValue] = useState(`w-[50%]`);

    return (
        <div className="flex-1 flex flex-col p-4">
            <div className="h-[100px] flex justify-between  items-center">
                <div className="mt-5 mb-2 border-2 py-1 px-3 flex justify-between  rounded-md hover:border-blue-500">
                    <input
                        ref={searchInputRef}
                        id="searchInput"
                        className="flex-grow outline-none text-gray-600 focus:text-blue-600"
                        type="text"
                        placeholder="Search Employee..."
                    />
                    <span>
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-6 w-6 text-gray-400 focus:text-blue-400 transition duration-100 cursor-pointer"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            {" "}
                            <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </span>
                </div>
                <div className="">
                    <button
                        type="button"
                        onClick={console.log("hye")}
                        className="inline-flex items-center py-2 px-3 text-sm font-medium text-center text-white rounded-lg bg-blue-600 to-voilet-500 sm:ml-auto shadow-md shadow-gray-300 hover:scale-[1.02] transition-transform"
                    >
                        <svg
                            className="mr-2 -ml-1 w-6 h-6"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"></path>
                        </svg>
                        Add Project
                    </button>
                </div>
                <div className="flex flex-row gap-6 justify-center items-center">
                    <div className="flex-1">
                        <h1 className="text-[20px] font-bold">
                            {currentUser.name}
                        </h1>
                        <h1 className="text-[15px] font-bold text-blue-400">
                            {profile.name}
                        </h1>
                    </div>

                    <div className="user">
                        <img
                            className="flex-1"
                            src={currentUser.profile_picture}
                            alt="Profile Picture"
                        />
                    </div>
                </div>
            </div>
            <div className="flex-1 flex flex-row justify-around gap-6">
                <div className="flex-1 bg-white gap-10 flex flex-col">
                    <Header withValue={withValue} />
                    <div className="flex-1 p-2 flex flex-col gap-6 rounded-3xl shadow-2xl bg-gray-300">
                        {startProjects.map((project) => (
                            <Cards project={project} key={project.id} />
                        ))}
                    </div>
                </div>
                <div className="flex-1 bg-white gap-10 flex flex-col">
                    <div className="h-[50px] gap-3 flex relative rounded-xl overflow-hidden bg-orange-300 shadow-md shadow-gray-400">
                        <div
                            className={` h-full flex justify-center items-center bg-orange-500 ${withValue}`}
                        ></div>

                        <div className="absolute text-white inset-0 flex items-center justify-center text-sm font-medium ">
                            <ion-icon
                                size="large"
                                name="checkmark-circle-outline"
                            ></ion-icon>
                            <h1 className="text-[25px] font-bold">Panding</h1>
                            <h1 className="font-bold ml-11  text-lg text-red">
                                13/17
                            </h1>
                        </div>
                    </div>
                    <div className="flex-1 p-2 flex flex-col rounded-3xl gap-6 shadow-2xl bg-gray-300">
                        {pendingProjects.map((project) => (
                            <Cards project={project} key={project.id} />
                        ))}
                    </div>
                </div>
                <div className="flex-1 bg-white gap-10 flex flex-col">
                    <div className="h-[50px] gap-3 flex relative rounded-xl overflow-hidden shadow-md bg-green-400 shadow-gray-400">
                        <div
                            className={` h-full flex justify-center items-center  bg-green-800 ${withValue}`}
                        ></div>
                        <div className="absolute text-white inset-0 flex items-center justify-center text-sm font-medium ">
                            <ion-icon
                                size="large"
                                name="checkmark-circle-outline"
                            ></ion-icon>
                            <h1 className="text-[25px] font-bold">Completed</h1>
                            <h1 className="font-bold ml-11  text-lg text-red">
                                13/17
                            </h1>
                        </div>
                    </div>
                    <div className="flex-1 p-2 gap-6 scroll-auto flex flex-col rounded-3xl shadow-2xl bg-gray-300">
                        {completedProjects.map((project) => (
                            <Cards project={project} key={project.id} />
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}
